// Mocks generated by Mockito 5.3.2 from annotations
// in bloc_login/test/features/sign_up/presentation/bloc/sign_up_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc_login/core/error/failure.dart' as _i6;
import 'package:bloc_login/core/model/user_model.dart' as _i7;
import 'package:bloc_login/features/sign_up/domain/repository/sign_up_repository.dart'
    as _i2;
import 'package:bloc_login/features/sign_up/domain/usecase/sign_up_usecase.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSignUpRepository_0 extends _i1.SmartFake
    implements _i2.SignUpRepository {
  _FakeSignUpRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SignUpUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpUsecase extends _i1.Mock implements _i4.SignUpUsecase {
  MockSignUpUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SignUpRepository get signUpRepository => (super.noSuchMethod(
        Invocation.getter(#signUpRepository),
        returnValue: _FakeSignUpRepository_0(
          this,
          Invocation.getter(#signUpRepository),
        ),
      ) as _i2.SignUpRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.User>> signUp({
    required String? username,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #username: username,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.User>>.value(
            _FakeEither_1<_i6.Failure, _i7.User>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #username: username,
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.User>>);
}
